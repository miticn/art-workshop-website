{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Mister/Desktop/art-workshop-website/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./users.service\";\nexport class AuthService {\n  constructor(service) {\n    this.service = service;\n    this.created = false;\n    this.loggedin = false;\n    this.init().then(() => {\n      console.log('AuthService initialization finished');\n    });\n  }\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.refresh();\n    })();\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  refresh() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.created) return;\n      return new Promise((resolve, reject) => {\n        _this2.service.getSessionUser().subscribe(resp => {\n          if (resp['error']) {\n            _this2.loggedin = false;\n            _this2.created = true;\n            _this2.user = null;\n          } else {\n            _this2.user = {\n              firstname: resp.firstname,\n              lastname: resp.lastname,\n              username: resp.username,\n              phone: resp.phone,\n              email: resp.email,\n              type: resp.type,\n              profilePicture: resp.profilePicture,\n              verified: resp.verified,\n              org: resp.org\n            };\n            console.log(\"Local user data: \");\n            console.log(_this2.user);\n            _this2.loggedin = true;\n            _this2.created = true;\n          }\n\n          resolve();\n        });\n      });\n    })();\n  }\n\n  login(username, password) {\n    this.service.login(username, password).subscribe(resp => {\n      location.reload();\n    });\n  }\n\n  logout() {\n    this.service.logout().subscribe(resp => {\n      this.loggedin = false;\n      this.user = null;\n    });\n  }\n\n  isLoggedIn() {\n    console.log(\"Logged in: \" + this.loggedin);\n    return this.loggedin;\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.UsersService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAP,CAAkB;EACtBC,YAAoBC,OAApB,EAAyC;IAArB;IAUZ,eAAU,KAAV;IACA,gBAAW,KAAX;IAVN,KAAKC,IAAL,GAAYC,IAAZ,CAAiB,MAAK;MACpBC,OAAO,CAACC,GAAR,CAAY,qCAAZ;IACD,CAFD;EAGD;;EAEaH,IAAI;IAAA;;IAAA;MAChB,MAAM,KAAI,CAACI,OAAL,EAAN;IADgB;EAEjB;;EAMMC,OAAO;IACZ,OAAO,KAAKC,IAAZ;EACD;;EACYF,OAAO;IAAA;;IAAA;MAClB,IAAG,MAAI,CAACG,OAAR,EAAiB;MACjB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;QACrC,MAAI,CAACX,OAAL,CAAaY,cAAb,GAA8BC,SAA9B,CAAyCC,IAAD,IAAc;UACpD,IAAGA,IAAI,CAAC,OAAD,CAAP,EAAiB;YACf,MAAI,CAACC,QAAL,GAAgB,KAAhB;YACA,MAAI,CAACP,OAAL,GAAe,IAAf;YACA,MAAI,CAACD,IAAL,GAAY,IAAZ;UACD,CAJD,MAKI;YACF,MAAI,CAACA,IAAL,GAAY;cACVS,SAAS,EAAEF,IAAI,CAACE,SADN;cAEVC,QAAQ,EAAEH,IAAI,CAACG,QAFL;cAGVC,QAAQ,EAAEJ,IAAI,CAACI,QAHL;cAIVC,KAAK,EAAEL,IAAI,CAACK,KAJF;cAKVC,KAAK,EAAEN,IAAI,CAACM,KALF;cAMVC,IAAI,EAAEP,IAAI,CAACO,IAND;cAOVC,cAAc,EAAER,IAAI,CAACQ,cAPX;cAQVC,QAAQ,EAAET,IAAI,CAACS,QARL;cASVC,GAAG,EAAEV,IAAI,CAACU;YATA,CAAZ;YAWArB,OAAO,CAACC,GAAR,CAAY,mBAAZ;YACAD,OAAO,CAACC,GAAR,CAAY,MAAI,CAACG,IAAjB;YACA,MAAI,CAACQ,QAAL,GAAgB,IAAhB;YACA,MAAI,CAACP,OAAL,GAAe,IAAf;UACD;;UACDE,OAAO;QACR,CAxBD;MAyBD,CA1BM,CAAP;IAFkB;EA6BnB;;EACDe,KAAK,CAACP,QAAD,EAAmBQ,QAAnB,EAAmC;IACtC,KAAK1B,OAAL,CAAayB,KAAb,CAAmBP,QAAnB,EAA6BQ,QAA7B,EAAuCb,SAAvC,CAAkDC,IAAD,IAAc;MAC7Da,QAAQ,CAACC,MAAT;IACD,CAFD;EAGD;;EAEDC,MAAM;IACJ,KAAK7B,OAAL,CAAa6B,MAAb,GAAsBhB,SAAtB,CAAiCC,IAAD,IAAc;MAC5C,KAAKC,QAAL,GAAgB,KAAhB;MACA,KAAKR,IAAL,GAAY,IAAZ;IACD,CAHD;EAID;;EAEDuB,UAAU;IACR3B,OAAO,CAACC,GAAR,CAAY,gBAAgB,KAAKW,QAAjC;IACA,OAAO,KAAKA,QAAZ;EACD;;AAhEqB;;;mBAAXjB,aAAWiC;AAAA;;;SAAXjC;EAAWkC,SAAXlC,WAAW;EAAAmC,YAFV","names":["AuthService","constructor","service","init","then","console","log","refresh","getUser","user","created","Promise","resolve","reject","getSessionUser","subscribe","resp","loggedin","firstname","lastname","username","phone","email","type","profilePicture","verified","org","login","password","location","reload","logout","isLoggedIn","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mister\\Desktop\\art-workshop-website\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { delay } from 'rxjs';\r\nimport { User } from '../models/user';\r\nimport { UsersService } from './users.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  constructor(private service: UsersService) { \r\n    this.init().then(() => {\r\n      console.log('AuthService initialization finished');\r\n    });\r\n  }\r\n\r\n  private async init(): Promise<void> {\r\n    await this.refresh();\r\n  }\r\n  \r\n  private created = false;\r\n  private loggedin = false;\r\n  private user: User;\r\n\r\n  public getUser(): User {\r\n    return this.user;\r\n  }\r\n  public async refresh(): Promise<void> {\r\n    if(this.created) return;\r\n    return new Promise((resolve, reject) => {\r\n      this.service.getSessionUser().subscribe((resp: any) => {\r\n        if(resp['error']){\r\n          this.loggedin = false;\r\n          this.created = true;\r\n          this.user = null;\r\n        }\r\n        else{\r\n          this.user = {\r\n            firstname: resp.firstname,\r\n            lastname: resp.lastname,\r\n            username: resp.username,\r\n            phone: resp.phone,\r\n            email: resp.email,\r\n            type: resp.type,\r\n            profilePicture: resp.profilePicture,\r\n            verified: resp.verified,\r\n            org: resp.org\r\n          };\r\n          console.log(\"Local user data: \")\r\n          console.log(this.user)\r\n          this.loggedin = true;\r\n          this.created = true;\r\n        }\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n  login(username: string, password: string) {\r\n    this.service.login(username, password).subscribe((resp: any) => {\r\n      location.reload();\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.service.logout().subscribe((resp: any) => {\r\n      this.loggedin = false;\r\n      this.user = null;\r\n    });\r\n  }\r\n\r\n  isLoggedIn() {\r\n    console.log(\"Logged in: \" + this.loggedin)\r\n    return this.loggedin;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}