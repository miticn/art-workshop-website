{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Mister/Desktop/art-workshop-website/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/google-maps\";\nexport class GeocodeService {\n  constructor(geocoder) {\n    this.geocoder = geocoder;\n  }\n\n  geocode(address) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const results = yield _this.geocoder.geocode({\n        address\n      });\n      return results[0].geometry.location;\n    })();\n  }\n\n  reverseGeocode(lat, lng) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const location = new google.maps.LatLng({\n        lat,\n        lng\n      });\n      console.log(location);\n      const results = yield new Promise((resolve, reject) => {\n        _this2.geocoder.geocode({\n          location\n        }, (results, status) => {\n          if (status === 'OK') {\n            resolve(results);\n          } else {\n            reject(status);\n          }\n        });\n      });\n      return results[0].formatted_address;\n    })();\n  }\n\n}\n\nGeocodeService.ɵfac = function GeocodeService_Factory(t) {\n  return new (t || GeocodeService)(i0.ɵɵinject(i1.MapGeocoder));\n};\n\nGeocodeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GeocodeService,\n  factory: GeocodeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,cAAP,CAAqB;EAEzBC,YAAoBC,QAApB,EAAyC;IAArB;EAA0B;;EAExCC,OAAO,CAACC,OAAD,EAAgB;IAAA;;IAAA;MAC3B,MAAMC,OAAO,SAAS,KAAI,CAACH,QAAL,CAAcC,OAAd,CAAsB;QAAEC;MAAF,CAAtB,CAAtB;MACA,OAAOC,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,CAAoBC,QAA3B;IAF2B;EAG5B;;EAEKC,cAAc,CAACC,GAAD,EAAcC,GAAd,EAAyB;IAAA;;IAAA;MAC3C,MAAMH,QAAQ,GAAG,IAAII,MAAM,CAACC,IAAP,CAAYC,MAAhB,CAAuB;QAAEJ,GAAF;QAAOC;MAAP,CAAvB,CAAjB;MACFI,OAAO,CAACC,GAAR,CAAYR,QAAZ;MACA,MAAMF,OAAO,SAAS,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;QACpD,MAAI,CAAChB,QAAL,CAAcC,OAAd,CAAsB;UAAEI;QAAF,CAAtB,EAAoC,CAACF,OAAD,EAAUc,MAAV,KAAoB;UACtD,IAAIA,MAAM,KAAK,IAAf,EAAqB;YACnBF,OAAO,CAACZ,OAAD,CAAP;UACD,CAFD,MAEO;YACLa,MAAM,CAACC,MAAD,CAAN;UACD;QACF,CAND;MAOD,CARqB,CAAtB;MASA,OAAOd,OAAO,CAAC,CAAD,CAAP,CAAWe,iBAAlB;IAZ6C;EAa9C;;AAtB0B;;;mBAAdpB,gBAAcqB;AAAA;;;SAAdrB;EAAcsB,SAAdtB,cAAc;EAAAuB,YAFb","names":["GeocodeService","constructor","geocoder","geocode","address","results","geometry","location","reverseGeocode","lat","lng","google","maps","LatLng","console","log","Promise","resolve","reject","status","formatted_address","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mister\\Desktop\\art-workshop-website\\frontend\\src\\app\\services\\geocode.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MapGeocoder } from '@angular/google-maps';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeocodeService {\n\n  constructor(private geocoder: MapGeocoder) { }\n\n  async geocode(address: string) {\n    const results = await this.geocoder.geocode({ address });\n    return results[0].geometry.location;\n  }\n\n  async reverseGeocode(lat: number, lng: number) {\n    const location = new google.maps.LatLng({ lat, lng });\n  console.log(location);\n  const results = await new Promise((resolve, reject) => {\n    this.geocoder.geocode({ location }, (results, status) => {\n      if (status === 'OK') {\n        resolve(results);\n      } else {\n        reject(status);\n      }\n    });\n  });\n  return results[0].formatted_address;\n}\n"]},"metadata":{},"sourceType":"module"}